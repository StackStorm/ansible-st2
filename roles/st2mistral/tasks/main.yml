---
- name: Install latest st2mistral package, auto-update
  become: yes
  package:
    name: st2mistral
    state: latest
  when: st2mistral_version == "latest"
  register: mistral_install_latest
  retries: 5
  delay: 3
  until: mistral_install_latest is succeeded
  tags: [st2mistral, skip_ansible_lint]

- name: Install present st2mistral package, no auto-update
  become: yes
  package:
    name: st2mistral
    state: present
  when: st2mistral_version == "present"
  register: mistral_install_present
  retries: 5
  delay: 3
  until: mistral_install_present is succeeded
  tags: st2mistral

- name: Install pinned st2mistral package
  become: yes
  package:
    name: st2mistral{{ '-' if ansible_facts.pkg_mgr == 'yum' else '=' }}{{ st2mistral_version }}
    state: present
  when:
    - st2mistral_version != "latest"
    - st2mistral_version != "present"
  register: mistral_install_tagged
  retries: 5
  delay: 3
  until: mistral_install_tagged is succeeded
  tags: st2mistral

- name: Enable mistral db upgrade
  become: yes
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/mistral/mistral-db-manage.upgrade.head.ansible.has.run
    - /etc/mistral/mistral-db-manage.populate.ansible.has.run
  when: mistral_install_latest is changed or mistral_install_present is changed or mistral_install_tagged is changed
  tags: st2mistral, skip_ansible_lint

- name: Deploy database init script
  become: yes
  template:
    src: init_mistral_db.SQL.j2
    dest: /etc/mistral/init_mistral_db.SQL
  tags: st2mistral

- name: Initiate mistral database
  vars:
      ansible_ssh_pipelining: true
  become: yes
  become_user: postgres
  shell: psql < /etc/mistral/init_mistral_db.SQL
  args:
    creates: /etc/mistral/init_mistral_db.SQL.ansible.has.run
  register: mistral_initiate_database
  notify:
    - restart mistral
  tags: st2mistral

- name: Make sure "Initiate mistral database" doesn't run twice
  become: yes
  file:
    path: /etc/mistral/init_mistral_db.SQL.ansible.has.run
    state: touch
  when: mistral_initiate_database.changed
  tags: st2mistral, skip_ansible_lint

- name: Configure mistral
  become: yes
  ini_file:
    dest: /etc/mistral/mistral.conf
    section: database
    option: connection
    value: postgresql+psycopg2://{{ st2mistral_db_username }}:{{ st2mistral_db_password }}@localhost/{{ st2mistral_db }}
    backup: yes
  # no_log to prevent plain text logging of the password
  no_log: yes
  notify:
    - restart mistral
  tags: st2mistral

- name: Configure mistral.conf settings
  # Ansible nested loop to iterate through a hash of hashes
  include_tasks: config.yml
  vars:
    _conf_section_name: "{{ _conf_section.0 }}"
    _conf_options: "{{ _conf_section.1 }}"
  # dict2items not available until 2.6, so use Jinja's dictsort instead
  loop: "{{ st2mistral_config | dictsort }}"
  loop_control:
    loop_var: _conf_section
  tags: st2mistral, config

- name: Setup mistral DB tables, etc
  become: yes
  shell: /opt/stackstorm/mistral/bin/mistral-db-manage --config-file /etc/mistral/mistral.conf upgrade head && touch /etc/mistral/mistral-db-manage.upgrade.head.ansible.has.run
  args:
    creates: /etc/mistral/mistral-db-manage.upgrade.head.ansible.has.run
  notify:
    - restart mistral
  tags: st2mistral

- name: Register mistral actions
  become: yes
  shell: /opt/stackstorm/mistral/bin/mistral-db-manage --config-file /etc/mistral/mistral.conf populate && touch /etc/mistral/mistral-db-manage.populate.ansible.has.run
  args:
    creates: /etc/mistral/mistral-db-manage.populate.ansible.has.run
  notify:
    - restart mistral
  tags: st2mistral, skip_ansible_lint

- name: Ensure mistral service is enabled and running
  become: yes
  service:
    name: mistral
    enabled: yes
    state: started
  tags: st2mistral
