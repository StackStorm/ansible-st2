---

# Causes an error if we try and which something that doesn't exist so use this
# as a workaround.
- name: Check to see if pip is already installed.
  command: "{{ pip }} --version"
  ignore_errors: true
  changed_when: false # read-only task
  check_mode: no
  register: pip_is_installed

- name: Download pip.
  get_url:
    url: "{{ pip_download_url }}"
    dest: "{{ pip_download_dest }}"
  when: pip_is_installed.rc != 0

- name: Install pip.
  command: "{{ python }} {{ pip_download_dest }}/get-pip.py{{ ' --proxy=' + pip_proxy if pip_proxy != '' else '' }}"
  become: yes
  when: pip_is_installed.rc != 0

- name: Delete get-pip.py.
  file:
    state: absent
    path: "{{ pip_download_dest }}/get-pip.py"
  when: pip_is_installed.rc != 0

# $ pip --version
# pip 1.5.2 from /usr/local/lib/python2.7/dist-packages (python 2.7)
- name: Check to see if pip is installed at the correct version.
  shell: "{{ pip }} --version | awk '{print $2}'"
  register: pip_installed_version
  changed_when: false
  check_mode: no
  when: pip_version or (pip_version | lower) != "latest"

- name: Install required version of pip.
  command: "{{ pip }} install pip=={{ pip_version }}"
  become: yes
  when: pip_version and pip_installed_version.stdout != pip_version and (pip_version | lower) != "latest"

- name: Upgrade to latest version of pip.
  command: "{{ pip }} {{ '--proxy=' + pip_proxy + ' ' if pip_proxy != '' else '' }}install -U pip"
  register: pip_latest_output
  become: yes
  changed_when: pip_latest_output.stdout.find('Requirement already up-to-date') == -1
  when: not pip_version or (pip_version | lower) == "latest"
